#!/usr/bin/env node

import express from 'express';
import { exec } from 'child_process';
import { promisify } from 'util';
import path from 'path';
import cors from 'cors';
import { fileURLToPath } from 'url';
import fs from 'fs/promises';
import crypto from 'crypto';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const execAsync = promisify(exec);
const app = express();
const PORT = process.env.GIT_SERVER_PORT || 3003;

// Enhanced caching system with persistent storage
const commitMessageCache = new Map();
const CACHE_TTL = 15 * 60 * 1000; // 15 minutes
const PERSISTENT_CACHE_DIR = path.join(__dirname, '..', '.cache');
const PERSISTENT_CACHE_FILE = path.join(PERSISTENT_CACHE_DIR, 'commit-messages.json');

// Performance metrics
const performanceMetrics = {
  cacheHits: 0,
  cacheMisses: 0,
  claudeCalls: 0,
  averageResponseTime: 0,
  totalResponseTime: 0
};

// Batch processing queue
const batchQueue = new Map();
const BATCH_DELAY = 1000; // 1 second delay to collect batch requests
let batchTimer = null;

function getCacheKey(changes) {
  // Create a stable hash for the changes
  const changeString = changes.map(pkg => 
    `${pkg.package}:${pkg.changes.map(c => `${c.status}${c.file}`).sort().join(',')}`
  ).sort().join('|');
  return crypto.createHash('md5').update(changeString).digest('hex');
}

// Load persistent cache on startup
async function loadPersistentCache() {
  try {
    await fs.mkdir(PERSISTENT_CACHE_DIR, { recursive: true });
    const cacheData = await fs.readFile(PERSISTENT_CACHE_FILE, 'utf8');
    const parsedCache = JSON.parse(cacheData);
    
    // Load entries that are still valid
    const now = Date.now();
    Object.entries(parsedCache).forEach(([key, entry]) => {
      if (entry.timestamp > now - CACHE_TTL) {
        commitMessageCache.set(key, entry);
      }
    });
    
    console.log(`[CACHE] Loaded ${commitMessageCache.size} entries from persistent cache`);
  } catch (error) {
    console.log('[CACHE] No persistent cache found or error loading:', error.message);
  }
}

// Save cache to disk periodically
async function savePersistentCache() {
  try {
    const cacheObject = {};
    commitMessageCache.forEach((value, key) => {
      cacheObject[key] = value;
    });
    
    await fs.mkdir(PERSISTENT_CACHE_DIR, { recursive: true });
    await fs.writeFile(PERSISTENT_CACHE_FILE, JSON.stringify(cacheObject, null, 2));
    console.log(`[CACHE] Saved ${commitMessageCache.size} entries to persistent cache`);
  } catch (error) {
    console.error('[CACHE] Failed to save persistent cache:', error);
  }
}

// Initialize cache on startup
loadPersistentCache();

// Save cache periodically
setInterval(savePersistentCache, 60000); // Save every minute

// Middleware
app.use(cors());
app.use(express.json());

// Logging middleware
app.use((req, res, next) => {
  console.log(`[${new Date().toISOString()}] ${req.method} ${req.path}`);
  next();
});

// Helper function to safely execute git commands
async function execGitCommand(cwd, args) {
  const command = `git ${args.join(' ')}`;
  console.log(`Executing: ${command} in ${cwd}`);
  
  try {
    const { stdout, stderr } = await execAsync(command, {
      cwd,
      maxBuffer: 1024 * 1024 * 10 // 10MB buffer
    });
    
    if (stderr && !stderr.includes('warning:')) {
      console.warn(`Git stderr: ${stderr}`);
    }
    
    return stdout;
  } catch (error) {
    console.error(`Git command failed: ${error.message}`);
    throw new Error(`Git command failed: ${error.message}`);
  }
}

// Execute git command endpoint
app.post('/api/git/exec', async (req, res) => {
  const { cwd, args } = req.body;
  
  if (!cwd || !args || !Array.isArray(args)) {
    return res.status(400).json({ error: 'Invalid request: cwd and args required' });
  }

  // Security: validate cwd is within the meta-gothic-framework
  const resolvedPath = path.resolve(cwd);
  const basePath = path.resolve(path.join(__dirname, '../../..'));
  
  if (!resolvedPath.startsWith(basePath)) {
    return res.status(403).json({ error: 'Access denied: path outside of meta-gothic-framework' });
  }

  try {
    const output = await execGitCommand(resolvedPath, args);
    res.text(output);
  } catch (error) {
    res.status(500).text(error.message);
  }
});

// Get git status for a specific workspace
app.post('/api/git/status', async (req, res) => {
  const { workspacePath } = req.body;
  
  // Default to meta-gothic-framework root if no workspace provided
  const targetPath = workspacePath || path.join(__dirname, '../../..');
  const resolvedPath = path.resolve(targetPath);
  
  // Security: validate path is within the meta-gothic-framework
  const basePath = path.resolve(path.join(__dirname, '../../..'));
  
  if (!resolvedPath.startsWith(basePath)) {
    return res.status(403).json({ error: 'Access denied: path outside of meta-gothic-framework' });
  }

  try {
    console.log(`Getting git status for workspace: ${resolvedPath}`);
    
    // Get status using porcelain format
    const statusOutput = await execGitCommand(resolvedPath, ['status', '--porcelain=v1']);
    
    res.json({
      success: true,
      output: statusOutput,
      workspacePath: resolvedPath,
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error(`Failed to get git status for ${resolvedPath}:`, error);
    res.status(500).json({
      success: false,
      error: error.message,
      output: '',
      workspacePath: resolvedPath,
      timestamp: new Date().toISOString()
    });
  }
});

// Scan all metaGOTHIC packages for changes
app.get('/api/git/scan-all', async (req, res) => {
  const packagesDir = path.join(__dirname, '../../packages');
  const packages = [
    'claude-client',
    'prompt-toolkit', 
    'sdlc-config',
    'sdlc-engine',
    'sdlc-content',
    'graphql-toolkit',
    'context-aggregator',
    'ui-components'
  ];

  try {
    const results = await Promise.all(
      packages.map(async (pkg) => {
        const pkgPath = path.join(packagesDir, pkg);
        
        try {
          // Get status
          const statusOutput = await execGitCommand(pkgPath, ['status', '--porcelain=v1']);
          const files = statusOutput
            .split('\n')
            .filter(line => line.trim())
            .map(line => {
              const status = line.substring(0, 2);
              const file = line.substring(3);
              return {
                file,
                status: status.trim() || '??',
                staged: status[0] !== ' ' && status[0] !== '?'
              };
            });

          // Get current branch
          const branch = await execGitCommand(pkgPath, ['branch', '--show-current']);

          return {
            package: pkg,
            path: pkgPath,
            branch: branch.trim(),
            changes: files,
            hasChanges: files.length > 0
          };
        } catch (error) {
          console.error(`Error scanning ${pkg}:`, error);
          return {
            package: pkg,
            path: pkgPath,
            error: error.message,
            hasChanges: false
          };
        }
      })
    );

    res.json(results.filter(r => r.hasChanges || r.error));
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Generate commit messages using Claude Code subprocess
app.post('/api/claude/generate-commit-messages', async (req, res) => {
  const { changes, timestamp, useFallback } = req.body;
  
  if (!changes || !Array.isArray(changes)) {
    return res.status(400).json({ error: 'Invalid request: changes array required' });
  }

  // Quick fallback mode for testing
  if (useFallback) {
    const fallbackMessages = changes.map(pkg => ({
      package: pkg.package,
      message: `feat: update ${pkg.package} with ${pkg.changes.length} changes`,
    }));
    
    return res.json({
      success: true,
      messages: fallbackMessages,
      claudeOutput: 'Using fallback mode',
      timestamp: new Date().toISOString()
    });
  }

  // Performance tracking
  const startTime = Date.now();
  
  // Check cache first
  const cacheKey = getCacheKey(changes);
  const cached = commitMessageCache.get(cacheKey);
  
  if (cached && cached.timestamp > Date.now() - CACHE_TTL) {
    console.log('[CLAUDE] Using cached commit messages');
    performanceMetrics.cacheHits++;
    
    const responseTime = Date.now() - startTime;
    updatePerformanceMetrics(responseTime);
    
    return res.json({
      success: true,
      messages: cached.messages,
      claudeOutput: 'Using cached response',
      timestamp: new Date().toISOString(),
      cached: true,
      performance: {
        responseTime,
        cacheHit: true,
        metrics: performanceMetrics
      }
    });
  }
  
  performanceMetrics.cacheMisses++;
  
  // Check if this request can be batched with others
  if (req.body.allowBatching !== false) {
    return handleBatchRequest(req, res, changes, cacheKey, startTime);
  }

  try {
    console.log(`[CLAUDE] Generating commit messages for ${changes.length} packages`);
    console.log(`[CLAUDE] Input changes structure:`, JSON.stringify(changes, null, 2));
    
    // Prepare the prompt for Claude Code
    const promptData = {
      task: 'generate_commit_messages',
      changes: changes.map(pkg => ({
        package: pkg.package,
        path: pkg.path,
        files: pkg.changes.map(change => ({
          file: change.file,
          status: change.status
        }))
      })),
      context: {
        project: 'meta-gothic-framework',
        timestamp: timestamp
      }
    };

    // Create a temporary prompt file
    const tempPromptPath = path.join(__dirname, '..', 'temp-claude-prompt.json');
    await execAsync(`echo '${JSON.stringify(promptData, null, 2)}' > "${tempPromptPath}"`);

    // Skip expensive file analysis for faster processing

    // Option to use XML prompt template for better results
    const useXmlPrompt = process.env.USE_XML_PROMPTS === 'true';
    
    let claudePrompt;
    if (useXmlPrompt) {
      // Try to use XML prompt template
      const xmlPromptPath = path.join(__dirname, '../../../prompt-repo/development/commit-message-generator.xml');
      try {
        const xmlTemplate = await execAsync(`cat "${xmlPromptPath}"`);
        claudePrompt = `${xmlTemplate.stdout}

INPUT DATA:
${changes.map(pkg => `
Package: ${pkg.package}
Changes: ${pkg.changes.map(change => `${change.status} ${change.file}`).join(', ')}
`).join('')}`;
      } catch (xmlError) {
        console.log('[CLAUDE] XML prompt not available, using simple prompt');
        useXmlPrompt = false;
      }
    }
    
    if (!useXmlPrompt) {
      // Ultra-concise prompt for maximum performance
      claudePrompt = `Generate commit messages for metaGOTHIC packages:

${changes.map(pkg => `${pkg.package}: ${pkg.changes.length} files changed`).join('\n')}

Return JSON: [{"package": "name", "message": "feat: description"}]
Use conventional commits. Be concise.`;
    }

    // Execute Claude Code subprocess with file input to avoid stdin issues
    console.log('[CLAUDE] Spawning Claude Code subprocess...');
    const tempPromptFile = path.join(__dirname, '..', 'temp-claude-input.txt');
    
    // Write prompt to temp file
    await execAsync(`cat > "${tempPromptFile}" << 'EOF'
${claudePrompt}
EOF`);
    
    // Execute Claude Code with optimized settings for headless operation
    const claudeCommand = `claude --print --output-format json < "${tempPromptFile}"`;
    console.log('[CLAUDE] Executing command...');
    
    let claudeOutput;
    try {
      const result = await execAsync(claudeCommand, {
        maxBuffer: 1024 * 1024 * 5, // 5MB buffer
        timeout: 60000, // 60 second timeout - Claude can be slow
        env: { 
          ...process.env, 
          FORCE_COLOR: '0', // Disable colors for easier parsing
          ANTHROPIC_API_KEY: process.env.ANTHROPIC_API_KEY || process.env.CLAUDE_API_KEY || ''
        }
      });
      claudeOutput = result.stdout;
    } catch (execError) {
      console.error('[CLAUDE] Execution error:', execError.message);
      if (execError.stderr) {
        console.error('[CLAUDE] Stderr:', execError.stderr);
      }
      throw new Error(`Claude execution failed: ${execError.message}`);
    }

    console.log('[CLAUDE] Raw output:', claudeOutput);

    // Parse Claude's JSON response - simplified for faster processing
    let messages;
    try {
      console.log('[CLAUDE] Parsing JSON response...');
      const claudeResponse = JSON.parse(claudeOutput);
      
      // Check if there was an error
      if (claudeResponse.is_error) {
        throw new Error(claudeResponse.error || 'Claude returned an error');
      }
      
      const responseText = claudeResponse.result || '';
      console.log('[CLAUDE] Response text length:', responseText.length, 'chars');
      console.log('[CLAUDE] Response preview:', responseText.substring(0, 200) + '...');
      
      // Try to extract JSON array from response
      // Look for array pattern in the response
      const jsonMatch = responseText.match(/\[\s*\{[\s\S]*?\}\s*\]/);
      if (jsonMatch) {
        console.log('[CLAUDE] Found JSON array, parsing...');
        messages = JSON.parse(jsonMatch[0]);
        console.log('[CLAUDE] Successfully parsed', messages.length, 'commit messages');
      } else {
        // Try to find inline JSON-like structure
        console.log('[CLAUDE] No JSON array found, looking for inline format...');
        const inlineMatch = responseText.match(/\{[^}]+package[^}]+message[^}]+\}/g);
        if (inlineMatch) {
          messages = inlineMatch.map(match => JSON.parse(match));
          console.log('[CLAUDE] Parsed', messages.length, 'inline messages');
        } else {
          throw new Error('No valid JSON format found in response');
        }
      }
    } catch (parseError) {
      console.error('[CLAUDE] Parse error:', parseError.message);
      console.error('[CLAUDE] Raw output was:', claudeOutput ? claudeOutput.substring(0, 500) : 'empty');
      
      // Quick fallback without extensive analysis
      messages = changes.map(pkg => ({
        package: pkg.package,
        message: `chore: update ${pkg.package} with ${pkg.changes.length} changes`,
      }));
      console.log('[CLAUDE] Using fallback messages');
    }

    // Clean up temp files
    try {
      await execAsync(`rm -f "${tempPromptPath}" "${tempPromptFile}"`);
    } catch (cleanupError) {
      console.warn('[CLAUDE] Failed to cleanup temp files:', cleanupError.message);
    }

    console.log('[CLAUDE] Generated messages:', messages);
    
    // Cache the results
    commitMessageCache.set(cacheKey, {
      messages,
      timestamp: Date.now()
    });
    
    // Update performance metrics
    performanceMetrics.claudeCalls++;
    const responseTime = Date.now() - startTime;
    updatePerformanceMetrics(responseTime);
    
    res.json({
      success: true,
      messages,
      claudeOutput: claudeOutput.slice(0, 500), // First 500 chars for debugging
      timestamp: new Date().toISOString(),
      performance: {
        responseTime,
        cacheHit: false,
        metrics: performanceMetrics
      }
    });

  } catch (error) {
    console.error('[CLAUDE] Failed to generate commit messages:', error);
    res.status(500).json({
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// Helper functions for performance and batching
function updatePerformanceMetrics(responseTime) {
  performanceMetrics.totalResponseTime += responseTime;
  const totalRequests = performanceMetrics.cacheHits + performanceMetrics.cacheMisses;
  performanceMetrics.averageResponseTime = Math.round(performanceMetrics.totalResponseTime / totalRequests);
}

function handleBatchRequest(req, res, changes, cacheKey, startTime) {
  // Add to batch queue
  batchQueue.set(cacheKey, { req, res, changes, startTime });
  
  // Clear existing timer
  if (batchTimer) {
    clearTimeout(batchTimer);
  }
  
  // Set new timer to process batch
  batchTimer = setTimeout(() => processBatchQueue(), BATCH_DELAY);
  
  // Don't send response yet - it will be sent when batch is processed
}

async function processBatchQueue() {
  if (batchQueue.size === 0) return;
  
  console.log(`[CLAUDE] Processing batch of ${batchQueue.size} requests`);
  
  // Collect all unique changes
  const allChanges = [];
  const requestMap = new Map();
  
  batchQueue.forEach((item, key) => {
    item.changes.forEach(pkg => {
      const existingPkg = allChanges.find(p => p.package === pkg.package);
      if (existingPkg) {
        // Merge changes
        pkg.changes.forEach(change => {
          if (!existingPkg.changes.find(c => c.file === change.file)) {
            existingPkg.changes.push(change);
          }
        });
      } else {
        allChanges.push(pkg);
      }
    });
    requestMap.set(key, item);
  });
  
  // Generate commit messages for all packages at once
  try {
    const batchResult = await generateCommitMessagesForBatch(allChanges);
    
    // Distribute results to individual requests
    requestMap.forEach((item, key) => {
      const relevantMessages = batchResult.messages.filter(msg => 
        item.changes.some(pkg => pkg.package === msg.package)
      );
      
      // Cache the results
      commitMessageCache.set(key, {
        messages: relevantMessages,
        timestamp: Date.now()
      });
      
      const responseTime = Date.now() - item.startTime;
      updatePerformanceMetrics(responseTime);
      
      item.res.json({
        success: true,
        messages: relevantMessages,
        claudeOutput: 'Processed in batch',
        timestamp: new Date().toISOString(),
        batched: true,
        performance: {
          responseTime,
          batchSize: batchQueue.size,
          metrics: performanceMetrics
        }
      });
    });
  } catch (error) {
    // Send error to all requests
    requestMap.forEach((item) => {
      item.res.status(500).json({
        success: false,
        error: error.message,
        timestamp: new Date().toISOString()
      });
    });
  }
  
  // Clear the queue
  batchQueue.clear();
  batchTimer = null;
}

async function generateCommitMessagesForBatch(allChanges) {
  // Similar to single generation but for batch
  const claudePrompt = `Generate commit messages for metaGOTHIC packages (batch):

${allChanges.map(pkg => `${pkg.package}: ${pkg.changes.length} files changed`).join('\n')}

Return JSON: [{"package": "name", "message": "feat: description"}]
Use conventional commits. Be concise.`;
  
  const tempPromptFile = path.join(__dirname, '..', 'temp-claude-batch.txt');
  await execAsync(`cat > "${tempPromptFile}" << 'EOF'
${claudePrompt}
EOF`);
  
  const claudeCommand = `claude --print --output-format json < "${tempPromptFile}"`;
  const { stdout: claudeOutput } = await execAsync(claudeCommand, {
    maxBuffer: 1024 * 1024 * 5,
    timeout: 90000, // 90 seconds for batch
    env: { ...process.env, FORCE_COLOR: '0' }
  });
  
  // Parse response
  const claudeResponse = JSON.parse(claudeOutput);
  const responseText = claudeResponse.result || claudeResponse.content || claudeOutput;
  const jsonMatch = responseText.match(/\[[\s\S]*?\]/);
  
  if (jsonMatch) {
    return { messages: JSON.parse(jsonMatch[0]) };
  }
  
  throw new Error('Failed to parse batch response');
}

// Performance metrics endpoint
app.get('/api/claude/metrics', (req, res) => {
  res.json({
    metrics: performanceMetrics,
    cacheSize: commitMessageCache.size,
    uptime: process.uptime(),
    timestamp: new Date().toISOString()
  });
});

// Clear cache endpoint (for testing)
app.post('/api/claude/clear-cache', (req, res) => {
  commitMessageCache.clear();
  performanceMetrics.cacheHits = 0;
  performanceMetrics.cacheMisses = 0;
  res.json({ success: true, message: 'Cache cleared' });
});

// REMOVED: Prompt execution endpoints moved to claude-server.js

// Keep only git-specific Claude endpoints like commit message generation
  // Set headers for Server-Sent Events
  res.writeHead(200, {
    'Content-Type': 'text/event-stream',
    'Cache-Control': 'no-cache',
    'Connection': 'keep-alive',
    'Access-Control-Allow-Origin': '*'
  });

  const { promptId, inputs } = req.query;
  const parsedInputs = JSON.parse(inputs || '{}');
  
  try {
    // Load the prompt template
    const promptPath = path.join(__dirname, '..', 'public', 'prompt-repo');
    const promptIndex = JSON.parse(await fs.readFile(path.join(promptPath, 'prompt-index.json'), 'utf-8'));
    
    // Find the prompt metadata
    let promptFile = null;
    for (const [category, prompts] of Object.entries(promptIndex.prompts)) {
      if (prompts[promptId]) {
        promptFile = prompts[promptId].file;
        break;
      }
    }
    
    if (!promptFile) {
      res.write(`data: ${JSON.stringify({ error: `Prompt ${promptId} not found` })}\n\n`);
      res.end();
      return;
    }
    
    // Read the prompt template
    const promptTemplate = await fs.readFile(path.join(promptPath, promptFile), 'utf-8');
    
    // Replace placeholders in the prompt with actual inputs
    let processedPrompt = promptTemplate;
    Object.entries(parsedInputs).forEach(([key, value]) => {
      // Replace various placeholder formats - but NOT XML tags
      processedPrompt = processedPrompt.replace(new RegExp(`\\{\\{${key}\\}\\}`, 'g'), value);
      processedPrompt = processedPrompt.replace(new RegExp(`\\$\\{${key}\\}`, 'g'), value);
      // Only replace standalone placeholder tags, not XML element tags
      processedPrompt = processedPrompt.replace(new RegExp(`<${key}/>`, 'g'), value);
    });
    
    // Build the full prompt
    let fullPrompt = `Please analyze the following based on the prompt template:\n\n`;
    Object.entries(parsedInputs).forEach(([key, value]) => {
      fullPrompt += `${key}: ${value}\n`;
    });
    fullPrompt += `\nNow execute the following analysis prompt:\n\n${processedPrompt}`;
    
    // Use spawn for streaming output
    const { spawn } = await import('child_process');
    const claude = spawn('claude', ['--print', fullPrompt, '--output-format', 'stream-json']);
    
    claude.stdout.on('data', (data) => {
      const chunk = data.toString();
      res.write(`data: ${JSON.stringify({ type: 'output', content: chunk })}\n\n`);
    });
    
    claude.stderr.on('data', (data) => {
      const error = data.toString();
      console.error('[PROMPT] Claude stderr:', error);
      res.write(`data: ${JSON.stringify({ type: 'error', content: error })}\n\n`);
    });
    
    claude.on('close', (code) => {
      res.write(`data: ${JSON.stringify({ type: 'complete', code })}\n\n`);
      res.end();
    });
    
  } catch (error) {
    res.write(`data: ${JSON.stringify({ error: error.message })}\n\n`);
    res.end();
  }
});

// Execute prompts using Claude CLI in non-interactive mode
app.post('/api/prompts/execute', async (req, res) => {
  const { promptId, inputs } = req.body;
  const startTime = Date.now();
  
  try {
    console.log(`[PROMPT] Executing prompt: ${promptId}`);
    console.log('[PROMPT] Inputs:', JSON.stringify(inputs, null, 2));
    
    // Load the prompt template
    const promptPath = path.join(__dirname, '..', 'public', 'prompt-repo');
    const promptIndex = JSON.parse(await fs.readFile(path.join(promptPath, 'prompt-index.json'), 'utf-8'));
    
    // Find the prompt metadata
    let promptFile = null;
    for (const [category, prompts] of Object.entries(promptIndex.prompts)) {
      if (prompts[promptId]) {
        promptFile = prompts[promptId].file;
        break;
      }
    }
    
    if (!promptFile) {
      throw new Error(`Prompt ${promptId} not found`);
    }
    
    // Read the prompt template
    const promptTemplate = await fs.readFile(path.join(promptPath, promptFile), 'utf-8');
    
    // Replace placeholders in the prompt with actual inputs
    let processedPrompt = promptTemplate;
    Object.entries(inputs).forEach(([key, value]) => {
      // Replace various placeholder formats - but NOT XML tags
      processedPrompt = processedPrompt.replace(new RegExp(`\\{\\{${key}\\}\\}`, 'g'), value);
      processedPrompt = processedPrompt.replace(new RegExp(`\\$\\{${key}\\}`, 'g'), value);
      // Only replace standalone placeholder tags, not XML element tags
      processedPrompt = processedPrompt.replace(new RegExp(`<${key}/>`, 'g'), value);
    });
    
    // Create a temporary file for the processed prompt
    const tempPromptFile = path.join(PERSISTENT_CACHE_DIR, `prompt-${Date.now()}.xml`);
    await fs.writeFile(tempPromptFile, processedPrompt);
    
    console.log('[PROMPT] Executing Claude with prompt file:', tempPromptFile);
    
    // Build the full prompt combining context and template
    let fullPrompt = `Please analyze the following based on the prompt template:\n\n`;
    Object.entries(inputs).forEach(([key, value]) => {
      fullPrompt += `${key}: ${value}\n`;
    });
    fullPrompt += `\nNow execute the following analysis prompt:\n\n${processedPrompt}`;
    
    // Write the full prompt to a temporary file to avoid shell escaping issues
    const fullPromptFile = path.join(PERSISTENT_CACHE_DIR, `full-prompt-${Date.now()}.txt`);
    await fs.writeFile(fullPromptFile, fullPrompt);
    
    // Execute Claude using child_process.spawn for better control
    const { spawn } = await import('child_process');
    
    console.log('[PROMPT] Executing Claude with spawn...');
    
    const executePromise = new Promise((resolve, reject) => {
      const claude = spawn('claude', ['--print', '--output-format', 'json'], {
        stdio: ['pipe', 'pipe', 'pipe']
      });
      
      let stdout = '';
      let stderr = '';
      
      // Send the prompt to stdin
      claude.stdin.write(fullPrompt);
      claude.stdin.end();
      
      claude.stdout.on('data', (data) => {
        stdout += data.toString();
      });
      
      claude.stderr.on('data', (data) => {
        stderr += data.toString();
      });
      
      claude.on('close', async (code) => {
        if (stderr) {
          console.error('[PROMPT] Claude stderr:', stderr);
        }
        
        console.log('[PROMPT] Claude output length:', stdout.length);
        
        // Parse Claude's response
        let result;
        try {
          const claudeResponse = JSON.parse(stdout);
          
          if (claudeResponse.is_error) {
            throw new Error(claudeResponse.error || 'Claude returned an error');
          }
          
          result = claudeResponse.result || '';
        } catch (parseError) {
          console.error('[PROMPT] Failed to parse Claude response:', parseError.message);
          // If parsing fails, use the raw output
          result = stdout;
        }
        
        // Clean up temp files
        try {
          await fs.unlink(tempPromptFile);
          await fs.unlink(fullPromptFile);
        } catch (cleanupError) {
          console.error('[PROMPT] Failed to clean up temp files:', cleanupError.message);
        }
        
        const duration = (Date.now() - startTime) / 1000;
        console.log(`[PROMPT] Execution completed in ${duration}s`);
        
        if (code !== 0) {
          reject(new Error(`Claude exited with code ${code}: ${stderr}`));
        } else {
          resolve({
            success: true,
            result,
            duration,
            promptId
          });
        }
      });
      
      claude.on('error', (error) => {
        console.error('[PROMPT] Claude process error:', error);
        reject(error);
      });
    });
    
    // Wait for the promise and send response
    const result = await executePromise;
    res.json(result);
    
  } catch (error) {
    console.error('[PROMPT] Error executing prompt:', error);
    res.status(500).json({
      success: false,
      error: error.message,
      details: error.stderr || error.toString()
    });
  }
});

// Health check
app.get('/api/git/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    version: '1.1.0',
    features: ['persistent-cache', 'batch-processing', 'performance-metrics']
  });
});

// Start server
app.listen(PORT, () => {
  console.log(`Git server running on http://localhost:${PORT}`);
  console.log('Available endpoints:');
  console.log('  POST /api/git/exec - Execute git command');
  console.log('  POST /api/git/status - Get git status for workspace');
  console.log('  GET  /api/git/scan-all - Scan all packages');
  console.log('  POST /api/claude/generate-commit-messages - Generate commit messages via Claude Code');
  console.log('  POST /api/prompts/execute - Execute prompts using Claude CLI');
  console.log('  GET  /api/git/health - Health check');
});

// Graceful shutdown
process.on('SIGINT', async () => {
  console.log('\nShutting down git server...');
  await savePersistentCache();
  console.log('Cache saved. Goodbye!');
  process.exit(0);
});